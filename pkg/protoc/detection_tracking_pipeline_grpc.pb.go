// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0--rc2
// source: detection_tracking_pipeline.proto

package protoc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DetectionTrackingPipeline_SendDataToServer_FullMethodName          = "/detection_tracking_system.DetectionTrackingPipeline/SendDataToServer"
	DetectionTrackingPipeline_SendFrameToServer_FullMethodName         = "/detection_tracking_system.DetectionTrackingPipeline/SendFrameToServer"
	DetectionTrackingPipeline_SendDetectedFrameToServer_FullMethodName = "/detection_tracking_system.DetectionTrackingPipeline/SendDetectedFrameToServer"
	DetectionTrackingPipeline_ReceiveDataFromServer_FullMethodName     = "/detection_tracking_system.DetectionTrackingPipeline/ReceiveDataFromServer"
	DetectionTrackingPipeline_CheckConnection_FullMethodName           = "/detection_tracking_system.DetectionTrackingPipeline/CheckConnection"
)

// DetectionTrackingPipelineClient is the client API for DetectionTrackingPipeline service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DetectionTrackingPipelineClient interface {
	// A simple RPC to send data to the server
	// and receive an acknowledgment
	SendDataToServer(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Ack, error)
	SendFrameToServer(ctx context.Context, in *FrameData, opts ...grpc.CallOption) (*Ack, error)
	SendDetectedFrameToServer(ctx context.Context, in *FrameData, opts ...grpc.CallOption) (*Ack, error)
	// A simple RPC to request data from the local storage
	ReceiveDataFromServer(ctx context.Context, in *Data, opts ...grpc.CallOption) (*DataResponse, error)
	// A simple RPC to send a ping to the service and receive a pong primarily for
	// testing the connection and latency
	CheckConnection(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Ack, error)
}

type detectionTrackingPipelineClient struct {
	cc grpc.ClientConnInterface
}

func NewDetectionTrackingPipelineClient(cc grpc.ClientConnInterface) DetectionTrackingPipelineClient {
	return &detectionTrackingPipelineClient{cc}
}

func (c *detectionTrackingPipelineClient) SendDataToServer(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, DetectionTrackingPipeline_SendDataToServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *detectionTrackingPipelineClient) SendFrameToServer(ctx context.Context, in *FrameData, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, DetectionTrackingPipeline_SendFrameToServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *detectionTrackingPipelineClient) SendDetectedFrameToServer(ctx context.Context, in *FrameData, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, DetectionTrackingPipeline_SendDetectedFrameToServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *detectionTrackingPipelineClient) ReceiveDataFromServer(ctx context.Context, in *Data, opts ...grpc.CallOption) (*DataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataResponse)
	err := c.cc.Invoke(ctx, DetectionTrackingPipeline_ReceiveDataFromServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *detectionTrackingPipelineClient) CheckConnection(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, DetectionTrackingPipeline_CheckConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DetectionTrackingPipelineServer is the server API for DetectionTrackingPipeline service.
// All implementations must embed UnimplementedDetectionTrackingPipelineServer
// for forward compatibility.
type DetectionTrackingPipelineServer interface {
	// A simple RPC to send data to the server
	// and receive an acknowledgment
	SendDataToServer(context.Context, *Data) (*Ack, error)
	SendFrameToServer(context.Context, *FrameData) (*Ack, error)
	SendDetectedFrameToServer(context.Context, *FrameData) (*Ack, error)
	// A simple RPC to request data from the local storage
	ReceiveDataFromServer(context.Context, *Data) (*DataResponse, error)
	// A simple RPC to send a ping to the service and receive a pong primarily for
	// testing the connection and latency
	CheckConnection(context.Context, *Data) (*Ack, error)
	mustEmbedUnimplementedDetectionTrackingPipelineServer()
}

// UnimplementedDetectionTrackingPipelineServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDetectionTrackingPipelineServer struct{}

func (UnimplementedDetectionTrackingPipelineServer) SendDataToServer(context.Context, *Data) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDataToServer not implemented")
}
func (UnimplementedDetectionTrackingPipelineServer) SendFrameToServer(context.Context, *FrameData) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFrameToServer not implemented")
}
func (UnimplementedDetectionTrackingPipelineServer) SendDetectedFrameToServer(context.Context, *FrameData) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDetectedFrameToServer not implemented")
}
func (UnimplementedDetectionTrackingPipelineServer) ReceiveDataFromServer(context.Context, *Data) (*DataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveDataFromServer not implemented")
}
func (UnimplementedDetectionTrackingPipelineServer) CheckConnection(context.Context, *Data) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckConnection not implemented")
}
func (UnimplementedDetectionTrackingPipelineServer) mustEmbedUnimplementedDetectionTrackingPipelineServer() {
}
func (UnimplementedDetectionTrackingPipelineServer) testEmbeddedByValue() {}

// UnsafeDetectionTrackingPipelineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DetectionTrackingPipelineServer will
// result in compilation errors.
type UnsafeDetectionTrackingPipelineServer interface {
	mustEmbedUnimplementedDetectionTrackingPipelineServer()
}

func RegisterDetectionTrackingPipelineServer(s grpc.ServiceRegistrar, srv DetectionTrackingPipelineServer) {
	// If the following call pancis, it indicates UnimplementedDetectionTrackingPipelineServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DetectionTrackingPipeline_ServiceDesc, srv)
}

func _DetectionTrackingPipeline_SendDataToServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetectionTrackingPipelineServer).SendDataToServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DetectionTrackingPipeline_SendDataToServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetectionTrackingPipelineServer).SendDataToServer(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _DetectionTrackingPipeline_SendFrameToServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrameData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetectionTrackingPipelineServer).SendFrameToServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DetectionTrackingPipeline_SendFrameToServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetectionTrackingPipelineServer).SendFrameToServer(ctx, req.(*FrameData))
	}
	return interceptor(ctx, in, info, handler)
}

func _DetectionTrackingPipeline_SendDetectedFrameToServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrameData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetectionTrackingPipelineServer).SendDetectedFrameToServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DetectionTrackingPipeline_SendDetectedFrameToServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetectionTrackingPipelineServer).SendDetectedFrameToServer(ctx, req.(*FrameData))
	}
	return interceptor(ctx, in, info, handler)
}

func _DetectionTrackingPipeline_ReceiveDataFromServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetectionTrackingPipelineServer).ReceiveDataFromServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DetectionTrackingPipeline_ReceiveDataFromServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetectionTrackingPipelineServer).ReceiveDataFromServer(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _DetectionTrackingPipeline_CheckConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetectionTrackingPipelineServer).CheckConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DetectionTrackingPipeline_CheckConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetectionTrackingPipelineServer).CheckConnection(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

// DetectionTrackingPipeline_ServiceDesc is the grpc.ServiceDesc for DetectionTrackingPipeline service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DetectionTrackingPipeline_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "detection_tracking_system.DetectionTrackingPipeline",
	HandlerType: (*DetectionTrackingPipelineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendDataToServer",
			Handler:    _DetectionTrackingPipeline_SendDataToServer_Handler,
		},
		{
			MethodName: "SendFrameToServer",
			Handler:    _DetectionTrackingPipeline_SendFrameToServer_Handler,
		},
		{
			MethodName: "SendDetectedFrameToServer",
			Handler:    _DetectionTrackingPipeline_SendDetectedFrameToServer_Handler,
		},
		{
			MethodName: "ReceiveDataFromServer",
			Handler:    _DetectionTrackingPipeline_ReceiveDataFromServer_Handler,
		},
		{
			MethodName: "CheckConnection",
			Handler:    _DetectionTrackingPipeline_CheckConnection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "detection_tracking_pipeline.proto",
}
